{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8677,"sourceType":"datasetVersion","datasetId":5836},{"sourceId":285982,"sourceType":"datasetVersion","datasetId":6057}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**This notebook is an exercise in the [SQL](https://www.kaggle.com/learn/intro-to-sql) course.  You can reference the tutorial at [this link](https://www.kaggle.com/dansbecker/select-from-where).**\n\n---\n","metadata":{}},{"cell_type":"markdown","source":"# Introduction\n\nTry writing some **SELECT** statements of your own to explore a large dataset of air pollution measurements.\n\nRun the cell below to set up the feedback system.","metadata":{}},{"cell_type":"code","source":"# Set up feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.sql.ex2 import *\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2024-05-12T18:02:24.431696Z","iopub.execute_input":"2024-05-12T18:02:24.432600Z","iopub.status.idle":"2024-05-12T18:02:24.438599Z","shell.execute_reply.started":"2024-05-12T18:02:24.432558Z","shell.execute_reply":"2024-05-12T18:02:24.437271Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The code cell below fetches the `global_air_quality` table from the `openaq` dataset.  We also preview the first five rows of the table.","metadata":{}},{"cell_type":"code","source":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"openaq\" dataset\ndataset_ref = client.dataset(\"openaq\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# Construct a reference to the \"global_air_quality\" table\ntable_ref = dataset_ref.table(\"global_air_quality\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"global_air_quality\" table\nclient.list_rows(table, max_results=5).to_dataframe()","metadata":{"execution":{"iopub.status.busy":"2024-05-12T18:02:28.213790Z","iopub.execute_input":"2024-05-12T18:02:28.214189Z","iopub.status.idle":"2024-05-12T18:02:29.784557Z","shell.execute_reply.started":"2024-05-12T18:02:28.214159Z","shell.execute_reply":"2024-05-12T18:02:29.783804Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Using Kaggle's public dataset BigQuery integration.\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"                  location      city country pollutant    value  \\\n0   Borówiec, ul. Drapałka  Borówiec      PL        bc  0.85217   \n1    Kraków, ul. Bulwarowa    Kraków      PL        bc  0.91284   \n2          Płock, ul. Reja     Płock      PL        bc  1.41000   \n3  Elbląg, ul. Bażyńskiego    Elbląg      PL        bc  0.33607   \n4  Piastów, ul. Pułaskiego   Piastów      PL        bc  0.51000   \n\n                  timestamp   unit source_name  latitude  longitude  \\\n0 2022-04-28 07:00:00+00:00  µg/m³        GIOS       1.0  52.276794   \n1 2022-04-27 23:00:00+00:00  µg/m³        GIOS       1.0  50.069308   \n2 2022-03-30 04:00:00+00:00  µg/m³        GIOS       1.0  52.550938   \n3 2022-05-03 13:00:00+00:00  µg/m³        GIOS       1.0  54.167847   \n4 2022-05-11 05:00:00+00:00  µg/m³        GIOS       1.0  52.191728   \n\n   averaged_over_in_hours       location_geom  \n0               17.074114  POINT(52.276794 1)  \n1               20.053492  POINT(50.069308 1)  \n2               19.709791  POINT(52.550938 1)  \n3               19.410942  POINT(54.167847 1)  \n4               20.837489  POINT(52.191728 1)  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>city</th>\n      <th>country</th>\n      <th>pollutant</th>\n      <th>value</th>\n      <th>timestamp</th>\n      <th>unit</th>\n      <th>source_name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>averaged_over_in_hours</th>\n      <th>location_geom</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Borówiec, ul. Drapałka</td>\n      <td>Borówiec</td>\n      <td>PL</td>\n      <td>bc</td>\n      <td>0.85217</td>\n      <td>2022-04-28 07:00:00+00:00</td>\n      <td>µg/m³</td>\n      <td>GIOS</td>\n      <td>1.0</td>\n      <td>52.276794</td>\n      <td>17.074114</td>\n      <td>POINT(52.276794 1)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Kraków, ul. Bulwarowa</td>\n      <td>Kraków</td>\n      <td>PL</td>\n      <td>bc</td>\n      <td>0.91284</td>\n      <td>2022-04-27 23:00:00+00:00</td>\n      <td>µg/m³</td>\n      <td>GIOS</td>\n      <td>1.0</td>\n      <td>50.069308</td>\n      <td>20.053492</td>\n      <td>POINT(50.069308 1)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Płock, ul. Reja</td>\n      <td>Płock</td>\n      <td>PL</td>\n      <td>bc</td>\n      <td>1.41000</td>\n      <td>2022-03-30 04:00:00+00:00</td>\n      <td>µg/m³</td>\n      <td>GIOS</td>\n      <td>1.0</td>\n      <td>52.550938</td>\n      <td>19.709791</td>\n      <td>POINT(52.550938 1)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Elbląg, ul. Bażyńskiego</td>\n      <td>Elbląg</td>\n      <td>PL</td>\n      <td>bc</td>\n      <td>0.33607</td>\n      <td>2022-05-03 13:00:00+00:00</td>\n      <td>µg/m³</td>\n      <td>GIOS</td>\n      <td>1.0</td>\n      <td>54.167847</td>\n      <td>19.410942</td>\n      <td>POINT(54.167847 1)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Piastów, ul. Pułaskiego</td>\n      <td>Piastów</td>\n      <td>PL</td>\n      <td>bc</td>\n      <td>0.51000</td>\n      <td>2022-05-11 05:00:00+00:00</td>\n      <td>µg/m³</td>\n      <td>GIOS</td>\n      <td>1.0</td>\n      <td>52.191728</td>\n      <td>20.837489</td>\n      <td>POINT(52.191728 1)</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Exercises\n\n### 1) Units of measurement\n\nWhich countries have reported pollution levels in units of \"ppm\"?  In the code cell below, set `first_query` to an SQL query that pulls the appropriate entries from the `country` column.\n\nIn case it's useful to see an example query, here's some code from the tutorial:\n\n```\nquery = \"\"\"\n        SELECT city\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE country = 'US'\n        \"\"\"\n```","metadata":{}},{"cell_type":"code","source":"query = \"\"\"\n        SELECT DISTINCT country\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE unit = 'ppm'\n        \"\"\"\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Set up the query\nquery_job = client.query(query)\n\n# API request - run the query, and return a pandas DataFrame\ncountries = query_job.to_dataframe()\n\ndisplay(countries)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T18:15:15.175761Z","iopub.execute_input":"2024-05-12T18:15:15.176148Z","iopub.status.idle":"2024-05-12T18:15:16.785534Z","shell.execute_reply.started":"2024-05-12T18:15:15.176111Z","shell.execute_reply":"2024-05-12T18:15:16.784234Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Using Kaggle's public dataset BigQuery integration.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"   country\n0       AR\n1       IL\n2       TW\n3       CO\n4       EC\n5       PE\n6       AU\n7       BR\n8       CA\n9       MX\n10      TH\n11      US\n12      ZA\n13      QA\n14      GT\n15      NP\n16      AE\n17      CH\n18      BM\n19      UZ\n20      GB\n21      CW\n22      IN\n23      RO\n24      RW\n25      MM\n26      BH\n27      CL","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>IL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>TW</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CO</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>EC</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PE</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>AU</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>BR</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>MX</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>TH</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>US</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>ZA</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>QA</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>GT</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>NP</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>AE</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>CH</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>BM</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>UZ</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>GB</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>CW</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>IN</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>RO</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>RW</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>MM</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>BH</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>CL</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"query = \"\"\"\n        SELECT DISTINCT country\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE unit = 'ppm'\n        \"\"\"\n# Create a QueryJobConfig object to estimate size of query without running it\ndry_run_config = bigquery.QueryJobConfig(dry_run=True)\n\n# API request - dry run query to estimate costs\ndry_run_query_job = client.query(query, job_config=dry_run_config)\n\nprint(\"This query will process {} bytes.\".format(dry_run_query_job.total_bytes_processed))","metadata":{"execution":{"iopub.status.busy":"2024-05-12T18:13:56.781678Z","iopub.execute_input":"2024-05-12T18:13:56.782810Z","iopub.status.idle":"2024-05-12T18:13:57.283516Z","shell.execute_reply.started":"2024-05-12T18:13:56.782777Z","shell.execute_reply":"2024-05-12T18:13:57.282366Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"This query will process 67585546 bytes.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Only run the query if it's less than 1 MB\nONE_MB = 1000*1000\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=ONE_MB)\n\n# Set up the query (will only run if it's less than 1 MB)\nsafe_query_job = client.query(query, job_config=safe_config)\n\n# API request - try to run the query, and return a pandas DataFrame\nsafe_query_job.to_dataframe()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Query to select countries with units of \"ppm\"\nfirst_query = query = \"\"\"\n        SELECT DISTINCT country\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE unit = 'ppm'\n        \"\"\" # Your code goes here\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 10 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nfirst_query_job = client.query(first_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nfirst_results = first_query_job.to_dataframe()\n\n# View top few rows of results\nprint(first_results.head())\n\n# Check your answer\nq_1.check()","metadata":{"execution":{"iopub.status.busy":"2024-05-12T18:16:10.742243Z","iopub.execute_input":"2024-05-12T18:16:10.742702Z","iopub.status.idle":"2024-05-12T18:16:12.356742Z","shell.execute_reply.started":"2024-05-12T18:16:10.742661Z","shell.execute_reply":"2024-05-12T18:16:12.355401Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"  country\n0      AR\n1      IL\n2      TW\n3      CO\n4      EC\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_WhichCountries\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":"For the solution, uncomment the line below.","metadata":{}},{"cell_type":"code","source":"#q_1.solution()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2) High air quality\n\nWhich pollution levels were reported to be exactly 0?  \n- Set `zero_pollution_query` to select **all columns** of the rows where the `value` column is 0.\n- Set `zero_pollution_results` to a pandas DataFrame containing the query results.","metadata":{}},{"cell_type":"code","source":"# Query to select all columns where pollution levels are exactly 0\nzero_pollution_query = ____ # Your code goes here\n\n# Set up the query\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(zero_pollution_query, job_config=safe_config)\n\n# API request - run the query and return a pandas DataFrame\nzero_pollution_results = ____ # Your code goes here\n\nprint(zero_pollution_results.head())\n\n# Check your answer\nq_2.check()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"For the solution, uncomment the line below.","metadata":{}},{"cell_type":"code","source":"#q_2.solution()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"That query wasn't too complicated, and it got the data you want. But these **SELECT** queries don't organizing data in a way that answers the most interesting questions. For that, we'll need the **GROUP BY** command. \n\nIf you know how to use [`groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html) in pandas, this is similar. But BigQuery works quickly with far larger datasets.\n\nFortunately, that's next.","metadata":{}},{"cell_type":"markdown","source":"# Keep going\n**[GROUP BY](https://www.kaggle.com/dansbecker/group-by-having-count)** clauses and their extensions give you the power to pull interesting statistics out of data, rather than receiving it in just its raw format.","metadata":{}},{"cell_type":"markdown","source":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-sql/discussion) to chat with other learners.*","metadata":{}}]}